{"ast":null,"code":"import { attackShip, checkDirectionalShipPlacement, markShipOnBoard, markShipArea, handleShipCount, randomlyPlaceShip } from './helperFunctions';\nconst BOARD_SIDE_SIZE = 10;\nconst FLEET_QUANTITY = 5;\nexport const Ship = function () {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ship';\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'horizontal';\n  const ship = {\n    name,\n    size,\n    direction,\n    hitState: Array(size).fill('o'),\n    hit: () => {\n      const nextHit = ship.hitState.findIndex(field => field === 'o');\n      ship.hitState[nextHit] = 'hit';\n    },\n    isSunk: () => !ship.hitState.includes('o')\n  };\n  return ship;\n};\n_c = Ship;\nexport const GameBoard = function () {\n  let playerSide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'human-player';\n  const gameBoard = {\n    side: playerSide,\n    board: [],\n    ships: [],\n    shipCount: 0,\n    isReady: false,\n    isGameOver: false,\n    emptyBoard: () => {\n      returnn    },\n    makeBoard: () => {\n      gameBoard.board = gameBoard.emptyBoard();\n      gameBoard.shipCount = 0;\n      gameBoard.isReady = false;\n      gameBoard.isGameOver = false;\n    },\n    createShips: function () {\n      let playerSide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'human-player';\n\n      if (playerSide === 'ai-player') {\n        return [Ship('TIE-bomber', 2), Ship('Star Destroyer', 3), Ship('Star Destroyer', 3), Ship('Super Star Destroyer', 4), Ship('TIE-bomber', 5)];\n      } else {\n        return [Ship('X-wing starfighter', 2), Ship('Shuttle', 3), Ship('Shuttle', 3), Ship('CR90 corvette', 4), Ship('MC80 Star Cruiser', 5)];\n      }\n    },\n    getShips: () => {\n      const shipArray = gameBoard.createShips();\n      shipArray.map((ship, id) => ship.id = id + 1);\n      gameBoard.ships = shipArray;\n      console.log(gameBoard.ships);\n      return shipArray;\n    },\n    changeShipDirection: function () {\n      let ship = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      ship.direction === 'horizontal' && ship.size > 1 ? ship.direction = 'vertical' : ship.direction = 'horizontal';\n    },\n    receiveAttack: (xCord, yCord) => {\n      const val = gameBoard.board[yCord - 1][xCord - 1];\n      if (val === '•' || val === '※') return false;\n\n      if (val === '_' || val === '*') {\n        gameBoard.board[yCord - 1][xCord - 1] = '•';\n      } else if (Number.isInteger(parseInt(val))) {\n        attackShip(gameBoard, xCord, yCord);\n      }\n\n      return true;\n    },\n    checkPlacement: function () {\n      let ship = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let xCord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let yCord = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // console.log('Placement check');\n      xCord = parseFloat(xCord);\n      yCord = parseFloat(yCord);\n      return checkDirectionalShipPlacement(gameBoard, ship, xCord, yCord, BOARD_SIDE_SIZE);\n    },\n    placeShip: function () {\n      let ship = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let xCord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let yCord = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (gameBoard.shipCount < FLEET_QUANTITY && gameBoard.checkPlacement(ship, xCord, yCord)) {\n        markShipOnBoard(ship, gameBoard, xCord, yCord);\n        markShipArea('*', ship, gameBoard, xCord, yCord, BOARD_SIDE_SIZE);\n        ship.onBoard = true;\n        ship.coordinates = [parseFloat(xCord), parseFloat(yCord)]; // console.log(\t`${ship.name}, ${ship.direction} --> ${ship.coordinates}`);\n\n        handleShipCount(gameBoard, FLEET_QUANTITY);\n        return true;\n      } else {\n        return false;\n      }\n    },\n    placeShipsAtRandom: () => {\n      const reversedShips = [...gameBoard.ships].reverse();\n\n      while (gameBoard.shipCount < FLEET_QUANTITY) {\n        reversedShips.forEach(ship => {\n          randomlyPlaceShip(ship, gameBoard, BOARD_SIDE_SIZE);\n        });\n      }\n    },\n    checkGameOver: () => {\n      if (gameBoard.shipCount === 0) {\n        gameBoard.isGameOver = true;\n        return true;\n      }\n\n      return false;\n    }\n  };\n  return gameBoard;\n};\n_c2 = GameBoard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Ship\");\n$RefreshReg$(_c2, \"GameBoard\");","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/proj2/src/Battleships.js"],"names":["attackShip","checkDirectionalShipPlacement","markShipOnBoard","markShipArea","handleShipCount","randomlyPlaceShip","BOARD_SIDE_SIZE","FLEET_QUANTITY","Ship","name","size","direction","ship","hitState","Array","fill","hit","nextHit","findIndex","field","isSunk","includes","GameBoard","playerSide","gameBoard","side","board","ships","shipCount","isReady","isGameOver","emptyBoard","makeBoard","createShips","getShips","shipArray","map","id","console","log","changeShipDirection","receiveAttack","xCord","yCord","val","Number","isInteger","parseInt","checkPlacement","parseFloat","placeShip","onBoard","coordinates","placeShipsAtRandom","reversedShips","reverse","forEach","checkGameOver"],"mappings":"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","sourcesContent":["import {\n\tattackShip,\n\tcheckDirectionalShipPlacement,\n\tmarkShipOnBoard,\n\tmarkShipArea,\n\thandleShipCount,\n\trandomlyPlaceShip,\n} from './helperFunctions';\n\nconst BOARD_SIDE_SIZE = 10;\nconst FLEET_QUANTITY = 5;\n\nexport const Ship = (name = 'ship', size = 1, direction = 'horizontal') => {\n\tconst ship = {\n\t\tname,\n\t\tsize,\n\t\tdirection,\n\t\thitState: Array(size).fill('o'),\n\t\thit: () => {\n\t\t\tconst nextHit = ship.hitState.findIndex((field) => field === 'o');\n\t\t\tship.hitState[nextHit] = 'hit';\n\t\t},\n\t\tisSunk: () => !ship.hitState.includes('o'),\n\t};\n\treturn ship;\n};\n\nexport const GameBoard = (playerSide = 'human-player') => {\n\tconst gameBoard = {\n\t\tside: playerSide,\n\t\tboard: [],\n\t\tships: [],\n\t\tshipCount: 0,\n\t\tisReady: false,\n\t\tisGameOver: false,\n\n\t\temptyBoard: () => {\n\t\t\treturn [\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t\t['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],\n\t\t\t];\n\t\t},\n\t\tmakeBoard: () => {\n\t\t\tgameBoard.board = gameBoard.emptyBoard();\n\t\t\tgameBoard.shipCount = 0;\n\t\t\tgameBoard.isReady = false;\n\t\t\tgameBoard.isGameOver = false;\n\t\t},\n\n\t\tcreateShips: (playerSide = 'human-player') => {\n\t\t\tif (playerSide === 'ai-player') {\n\t\t\t\treturn [\n\t\t\t\t\tShip('TIE-bomber', 2),\n\t\t\t\t\tShip('Star Destroyer', 3),\n\t\t\t\t\tShip('Star Destroyer', 3),\n\t\t\t\t\tShip('Super Star Destroyer', 4),\n\t\t\t\t\tShip('TIE-bomber', 5)\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\tShip('X-wing starfighter', 2),\n\t\t\t\t\tShip('Shuttle', 3),\n\t\t\t\t\tShip('Shuttle', 3),\n\t\t\t\t\tShip('CR90 corvette', 4),\n\t\t\t\t\tShip('MC80 Star Cruiser', 5),\n\t\t\t\t];\n\t\t\t}\n\t\t},\n\t\tgetShips: () => {\n\t\t\tconst shipArray = gameBoard.createShips();\n\t\t\tshipArray.map((ship, id) => (ship.id = id + 1));\n\t\t\tgameBoard.ships = shipArray;\n\t\t\tconsole.log(gameBoard.ships);\n\t\t\treturn shipArray;\n\t\t},\n\n\t\tchangeShipDirection: (ship = {}) => {\n\t\t\tship.direction === 'horizontal' && ship.size > 1\n\t\t\t\t? (ship.direction = 'vertical')\n\t\t\t\t: (ship.direction = 'horizontal');\n\t\t},\n\n\t\treceiveAttack: (xCord, yCord) => {\n\t\t\tconst val = gameBoard.board[yCord - 1][xCord - 1];\n\t\t\tif (val === '•' || val === '※') return false;\n\t\t\tif (val === '_' || val === '*') {\n\t\t\t\tgameBoard.board[yCord - 1][xCord - 1] = '•';\n\t\t\t} else if (Number.isInteger(parseInt(val))) {\n\t\t\t\tattackShip(gameBoard, xCord, yCord);\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tcheckPlacement: (ship = {}, xCord = 0, yCord = 0) => {\n\t\t\t// console.log('Placement check');\n\t\t\txCord = parseFloat(xCord);\n\t\t\tyCord = parseFloat(yCord);\n\t\t\treturn checkDirectionalShipPlacement(\n\t\t\t\tgameBoard,\n\t\t\t\tship,\n\t\t\t\txCord,\n\t\t\t\tyCord,\n\t\t\t\tBOARD_SIDE_SIZE\n\t\t\t);\n\t\t},\n\n\t\tplaceShip: (ship = {}, xCord = 0, yCord = 0) => {\n\t\t\tif (\n\t\t\t\tgameBoard.shipCount < FLEET_QUANTITY &&\n\t\t\t\tgameBoard.checkPlacement(ship, xCord, yCord)\n\t\t\t) {\n\t\t\t\tmarkShipOnBoard(ship, gameBoard, xCord, yCord);\n\t\t\t\tmarkShipArea('*', ship, gameBoard, xCord, yCord, BOARD_SIDE_SIZE);\n\t\t\t\tship.onBoard = true;\n\t\t\t\tship.coordinates = [parseFloat(xCord), parseFloat(yCord)];\n\t\t\t\t// console.log(\t`${ship.name}, ${ship.direction} --> ${ship.coordinates}`);\n\t\t\t\thandleShipCount(gameBoard, FLEET_QUANTITY);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tplaceShipsAtRandom: () => {\n\t\t\tconst reversedShips = [...gameBoard.ships].reverse();\n\t\t\twhile (gameBoard.shipCount < FLEET_QUANTITY) {\n\t\t\t\treversedShips.forEach((ship) => {\n\t\t\t\t\trandomlyPlaceShip(ship, gameBoard, BOARD_SIDE_SIZE);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\tcheckGameOver: () => {\n\t\t\tif (gameBoard.shipCount === 0) {\n\t\t\t\tgameBoard.isGameOver = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t};\n\treturn gameBoard;\n};\n"]},"metadata":{},"sourceType":"module"}