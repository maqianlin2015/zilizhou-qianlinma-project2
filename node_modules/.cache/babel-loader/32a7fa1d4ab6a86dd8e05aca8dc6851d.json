{"ast":null,"code":"const attackShip = (gameBoard, xCord, yCord) => {\n  const attackedShip = gameBoard.ships[parseInt(gameBoard.board[yCord - 1][xCord - 1]) - 1];\n  attackedShip.hit();\n  gameBoard.board[yCord - 1][xCord - 1] = '※';\n  checkIfShipHasSunk(attackedShip, gameBoard);\n\n  function checkIfShipHasSunk(attackedShip, gameBoard) {\n    if (attackedShip.isSunk()) {\n      markShipArea('•', attackedShip, gameBoard);\n      gameBoard.shipCount--;\n      gameBoard.checkGameOver();\n      if (gameBoard.isGameOver === true) console.log('GAME OVER!');\n    }\n  }\n};\n\nconst checkDirectionalShipPlacement = (gameBoard, ship, xCord, yCord, boardSize) => {\n  xCord = parseFloat(xCord);\n  yCord = parseFloat(yCord);\n\n  if (ship.direction === 'horizontal') {\n    if (ship.size + xCord - 1 > boardSize) return false;\n\n    for (let i = 0; i < ship.size; i++) {\n      if (gameBoard.board[yCord - 1][xCord - 1 + i] !== '_') return false;\n    }\n  } else {\n    if (ship.size + yCord - 1 > boardSize) return false;\n\n    for (let i = 0; i < ship.size; i++) {\n      if (gameBoard.board[yCord - 1 + i][xCord - 1] !== '_') return false;\n    }\n  }\n\n  return true;\n};\n\nconst markShipOnBoard = function () {\n  let ship = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let gameBoard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let xCord = arguments.length > 2 ? arguments[2] : undefined;\n  let yCord = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (ship.direction === 'horizontal') {\n    ship.hitState.forEach((cell, i) => {\n      gameBoard.board[yCord - 1][xCord - 1 + i] = `${ship.id}`;\n    });\n  } else if (ship.direction === 'vertical') {\n    ship.hitState.forEach((cell, i) => {\n      gameBoard.board[yCord - 1 + i][xCord - 1] = `${ship.id}`;\n    });\n  }\n};\n\nconst markShipArea = function () {\n  let mark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '•';\n  let ship = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let gameBoard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let xCord = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ship.coordinates[0];\n  let yCord = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ship.coordinates[1];\n  let boardSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;\n  ship.hitState.forEach((cell, i) => {\n    if (ship.direction === 'horizontal') {\n      // mark horizontally areas above and bellow\n      if (yCord < boardSize) {\n        gameBoard.board[yCord][xCord - 1 + i] = `${mark}`;\n      }\n\n      if (yCord > 1) {\n        gameBoard.board[yCord - 2][xCord - 1 + i] = `${mark}`;\n      } // mark remaining areas\n\n\n      if (xCord > 1) {\n        if (yCord > 1) {\n          gameBoard.board[yCord - 2][xCord - 2] = `${mark}`;\n        }\n\n        gameBoard.board[yCord - 1][xCord - 2] = `${mark}`;\n\n        if (yCord < boardSize) {\n          gameBoard.board[yCord][xCord - 2] = `${mark}`;\n        }\n      }\n\n      if (xCord - 1 + ship.size < boardSize) {\n        if (yCord > 1) {\n          gameBoard.board[yCord - 2][xCord - 1 + ship.size] = `${mark}`;\n        }\n\n        gameBoard.board[yCord - 1][xCord - 1 + ship.size] = `${mark}`;\n\n        if (yCord < boardSize) {\n          gameBoard.board[yCord][xCord - 1 + ship.size] = `${mark}`;\n        }\n      }\n    } else if (ship.direction === 'vertical') {\n      if (xCord < boardSize) {\n        // mark vertically areas on right and left\n        gameBoard.board[yCord - 1 + i][xCord] = `${mark}`;\n      }\n\n      if (xCord > 1) {\n        gameBoard.board[yCord - 1 + i][xCord - 2] = `${mark}`;\n      } // mark horizontally remaining areas\n\n\n      if (yCord > 1) {\n        if (xCord > 1) {\n          gameBoard.board[yCord - 2][xCord - 2] = `${mark}`;\n        }\n\n        gameBoard.board[yCord - 2][xCord - 1] = `${mark}`;\n\n        if (xCord < boardSize) {\n          gameBoard.board[yCord - 2][xCord] = `${mark}`;\n        }\n      }\n\n      if (yCord - 1 + ship.size < boardSize) {\n        if (xCord > 1) {\n          gameBoard.board[yCord - 1 + ship.size][xCord - 2] = `${mark}`;\n        }\n\n        gameBoard.board[yCord - 1 + ship.size][xCord - 1] = `${mark}`;\n\n        if (xCord < boardSize) {\n          gameBoard.board[yCord - 1 + ship.size][xCord] = `${mark}`;\n        }\n      }\n    }\n  });\n};\n\nconst handleShipCount = function () {\n  let gameBoard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let fleetQuantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  gameBoard.shipCount++;\n\n  if (gameBoard.shipCount === fleetQuantity) {\n    gameBoard.isReady = true;\n  }\n};\n\nconst randomlyPlaceShip = function () {\n  let ship = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let gameBoard = arguments.length > 1 ? arguments[1] : undefined;\n  let boardSize = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (ship.onBoard !== true) {\n    const randX = Math.ceil(Math.random() * boardSize);\n    const randY = Math.ceil(Math.random() * boardSize);\n    if (Math.random() * 2 > 1) gameBoard.changeShipDirection(ship);\n    gameBoard.placeShip(ship, randX, randY);\n    randomlyPlaceShip(ship, gameBoard, boardSize);\n  }\n};\n\nconst makeRandomAIMove = function (player, opponent) {\n  let boardSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const randX = Math.ceil(Math.random() * boardSize);\n  const randY = Math.ceil(Math.random() * boardSize);\n\n  if (opponent.gameBoard.receiveAttack(randX, randY)) {\n    opponent.gameBoard.receiveAttack(randX, randY);\n    player.lastAIMove = [randX, randY, opponent.gameBoard.board[randY - 1][randX - 1]];\n\n    if (opponent.gameBoard.board[randY - 1][randX - 1] === '※') {\n      // console.log('AI hit move!');\n      player.nextAIMove = 'down';\n      return true;\n    }\n  } else {\n    makeRandomAIMove(player, opponent);\n  }\n};\n\nconst makeSmartAIMove = (player, opponent) => {\n  // console.log('Smart AI move');\n  const lastX = player.lastAIMove[0];\n  const lastY = player.lastAIMove[1]; // const lastMoveStatus = player.lastAIMove[2];\n\n  const atkOppGB = opponent.gameBoard.receiveAttack;\n  player.nextAIMove !== '' ? makeSmartMove(player.nextAIMove, player.moveIndicator, opponent.gameBoard.board) : makeRandomAIMove(player, opponent);\n\n  function makeSmartMove() {\n    let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'down';\n    let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let opponentBoard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (direction === 'down') {\n      if (atkOppGB(lastX, lastY + i)) {\n        atkOppGB(lastX, lastY + i);\n\n        if (opponentBoard[lastY + i - 1][lastX - 1] !== '※') {\n          player.nextAIMove = 'up';\n          player.moveIndicator = 1;\n        } else {\n          console.log(player.moveIndicator);\n          player.moveIndicator++;\n        }\n\n        return;\n      } else {\n        player.nextAIMove = 'up';\n        makeSmartMove(player.nextAIMove);\n      }\n    } else if (direction === 'up') {\n      if (atkOppGB(lastX, lastY - i)) {\n        atkOppGB(lastX, lastY - i);\n\n        if (opponentBoard[lastY - i - 1][lastX - 1] !== '※') {\n          player.nextAIMove = 'left';\n          player.moveIndicator = 1;\n        } else {\n          console.log(player.moveIndicator);\n          player.moveIndicator++;\n        }\n\n        return;\n      } else {\n        player.nextAIMove = 'left';\n        makeSmartMove(player.nextAIMove);\n      }\n    } else if (direction === 'left') {\n      if (atkOppGB(lastX - i, lastY)) {\n        atkOppGB(lastX - i, lastY);\n\n        if (opponentBoard[lastY - 1][lastX - i - 1] !== '※') {\n          player.nextAIMove = 'right';\n          player.moveIndicator = 1;\n        } else {\n          console.log(player.moveIndicator);\n          player.moveIndicator++;\n        }\n\n        return;\n      } else {\n        player.nextAIMove = 'right';\n        makeSmartMove(player.nextAIMove);\n      }\n    } else if (direction === 'right') {\n      if (atkOppGB(lastX + i, lastY)) {\n        atkOppGB(lastX + i, lastY);\n\n        if (opponentBoard[lastY - 1][lastX + i - 1] !== '※') {\n          player.nextAIMove = '';\n          player.moveIndicator = 1;\n        } else {\n          console.log(player.moveIndicator);\n          player.moveIndicator++;\n        }\n\n        return;\n      } else {\n        player.nextAIMove = '';\n        makeRandomAIMove(player, opponent, 10);\n      }\n    }\n  }\n};\n\nexport { attackShip, checkDirectionalShipPlacement, markShipOnBoard, markShipArea, handleShipCount, randomlyPlaceShip, makeSmartAIMove, makeRandomAIMove };","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/proj2/src/helperFunctions.js"],"names":["attackShip","gameBoard","xCord","yCord","attackedShip","ships","parseInt","board","hit","checkIfShipHasSunk","isSunk","markShipArea","shipCount","checkGameOver","isGameOver","console","log","checkDirectionalShipPlacement","ship","boardSize","parseFloat","direction","size","i","markShipOnBoard","hitState","forEach","cell","id","mark","coordinates","handleShipCount","fleetQuantity","isReady","randomlyPlaceShip","onBoard","randX","Math","ceil","random","randY","changeShipDirection","placeShip","makeRandomAIMove","player","opponent","receiveAttack","lastAIMove","nextAIMove","makeSmartAIMove","lastX","lastY","atkOppGB","makeSmartMove","moveIndicator","opponentBoard"],"mappings":"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","sourcesContent":["const attackShip = (gameBoard, xCord, yCord) => {\n\tconst attackedShip =\n\t\tgameBoard.ships[parseInt(gameBoard.board[yCord - 1][xCord - 1]) - 1];\n\tattackedShip.hit();\n\tgameBoard.board[yCord - 1][xCord - 1] = '※';\n\tcheckIfShipHasSunk(attackedShip, gameBoard);\n\n\tfunction checkIfShipHasSunk(attackedShip, gameBoard) {\n\t\tif (attackedShip.isSunk()) {\n\t\t\tmarkShipArea('•', attackedShip, gameBoard);\n\t\t\tgameBoard.shipCount--;\n\t\t\tgameBoard.checkGameOver();\n\t\t\tif (gameBoard.isGameOver === true) console.log('GAME OVER!');\n\t\t}\n\t}\n};\n\nconst checkDirectionalShipPlacement = (\n\tgameBoard,\n\tship,\n\txCord,\n\tyCord,\n\tboardSize\n) => {\n\txCord = parseFloat(xCord);\n\tyCord = parseFloat(yCord);\n\tif (ship.direction === 'horizontal') {\n\t\tif (ship.size + xCord - 1 > boardSize) return false;\n\t\tfor (let i = 0; i < ship.size; i++) {\n\t\t\tif (gameBoard.board[yCord - 1][xCord - 1 + i] !== '_') return false;\n\t\t}\n\t} else {\n\t\tif (ship.size + yCord - 1 > boardSize) return false;\n\t\tfor (let i = 0; i < ship.size; i++) {\n\t\t\tif (gameBoard.board[yCord - 1 + i][xCord - 1] !== '_') return false;\n\t\t}\n\t}\n\treturn true;\n};\n\nconst markShipOnBoard = (ship = {}, gameBoard = {}, xCord, yCord) => {\n\tif (ship.direction === 'horizontal') {\n\t\tship.hitState.forEach((cell, i) => {\n\t\t\tgameBoard.board[yCord - 1][xCord - 1 + i] = `${ship.id}`;\n\t\t});\n\t} else if (ship.direction === 'vertical') {\n\t\tship.hitState.forEach((cell, i) => {\n\t\t\tgameBoard.board[yCord - 1 + i][xCord - 1] = `${ship.id}`;\n\t\t});\n\t}\n};\n\nconst markShipArea = (\n\tmark = '•',\n\tship = {},\n\tgameBoard = {},\n\txCord = ship.coordinates[0],\n\tyCord = ship.coordinates[1],\n\tboardSize = 10\n) => {\n\tship.hitState.forEach((cell, i) => {\n\t\tif (ship.direction === 'horizontal') {\n\t\t\t// mark horizontally areas above and bellow\n\t\t\tif (yCord < boardSize) {\n\t\t\t\tgameBoard.board[yCord][xCord - 1 + i] = `${mark}`;\n\t\t\t}\n\t\t\tif (yCord > 1) {\n\t\t\t\tgameBoard.board[yCord - 2][xCord - 1 + i] = `${mark}`;\n\t\t\t}\n\t\t\t// mark remaining areas\n\t\t\tif (xCord > 1) {\n\t\t\t\tif (yCord > 1) {\n\t\t\t\t\tgameBoard.board[yCord - 2][xCord - 2] = `${mark}`;\n\t\t\t\t}\n\t\t\t\tgameBoard.board[yCord - 1][xCord - 2] = `${mark}`;\n\t\t\t\tif (yCord < boardSize) {\n\t\t\t\t\tgameBoard.board[yCord][xCord - 2] = `${mark}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (xCord - 1 + ship.size < boardSize) {\n\t\t\t\tif (yCord > 1) {\n\t\t\t\t\tgameBoard.board[yCord - 2][xCord - 1 + ship.size] = `${mark}`;\n\t\t\t\t}\n\t\t\t\tgameBoard.board[yCord - 1][xCord - 1 + ship.size] = `${mark}`;\n\t\t\t\tif (yCord < boardSize) {\n\t\t\t\t\tgameBoard.board[yCord][xCord - 1 + ship.size] = `${mark}`;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (ship.direction === 'vertical') {\n\t\t\tif (xCord < boardSize) {\n\t\t\t\t// mark vertically areas on right and left\n\t\t\t\tgameBoard.board[yCord - 1 + i][xCord] = `${mark}`;\n\t\t\t}\n\t\t\tif (xCord > 1) {\n\t\t\t\tgameBoard.board[yCord - 1 + i][xCord - 2] = `${mark}`;\n\t\t\t}\n\t\t\t// mark horizontally remaining areas\n\t\t\tif (yCord > 1) {\n\t\t\t\tif (xCord > 1) {\n\t\t\t\t\tgameBoard.board[yCord - 2][xCord - 2] = `${mark}`;\n\t\t\t\t}\n\t\t\t\tgameBoard.board[yCord - 2][xCord - 1] = `${mark}`;\n\t\t\t\tif (xCord < boardSize) {\n\t\t\t\t\tgameBoard.board[yCord - 2][xCord] = `${mark}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (yCord - 1 + ship.size < boardSize) {\n\t\t\t\tif (xCord > 1) {\n\t\t\t\t\tgameBoard.board[yCord - 1 + ship.size][xCord - 2] = `${mark}`;\n\t\t\t\t}\n\t\t\t\tgameBoard.board[yCord - 1 + ship.size][xCord - 1] = `${mark}`;\n\t\t\t\tif (xCord < boardSize) {\n\t\t\t\t\tgameBoard.board[yCord - 1 + ship.size][xCord] = `${mark}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst handleShipCount = (gameBoard = {}, fleetQuantity = 6) => {\n\tgameBoard.shipCount++;\n\tif (gameBoard.shipCount === fleetQuantity) {\n\t\tgameBoard.isReady = true;\n\t}\n};\n\nconst randomlyPlaceShip = (ship = {}, gameBoard, boardSize) => {\n\tif (ship.onBoard !== true) {\n\t\tconst randX = Math.ceil(Math.random() * boardSize);\n\t\tconst randY = Math.ceil(Math.random() * boardSize);\n\t\tif (Math.random() * 2 > 1) gameBoard.changeShipDirection(ship);\n\t\tgameBoard.placeShip(ship, randX, randY);\n\t\trandomlyPlaceShip(ship, gameBoard, boardSize);\n\t}\n};\n\nconst makeRandomAIMove = (player, opponent, boardSize = 10) => {\n\tconst randX = Math.ceil(Math.random() * boardSize);\n\tconst randY = Math.ceil(Math.random() * boardSize);\n\tif (opponent.gameBoard.receiveAttack(randX, randY)) {\n\t\topponent.gameBoard.receiveAttack(randX, randY);\n\t\tplayer.lastAIMove = [\n\t\t\trandX,\n\t\t\trandY,\n\t\t\topponent.gameBoard.board[randY - 1][randX - 1],\n\t\t];\n\t\tif (opponent.gameBoard.board[randY - 1][randX - 1] === '※') {\n\t\t\t// console.log('AI hit move!');\n\t\t\tplayer.nextAIMove = 'down';\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tmakeRandomAIMove(player, opponent);\n\t}\n};\n\nconst makeSmartAIMove = (player, opponent) => {\n\t// console.log('Smart AI move');\n\tconst lastX = player.lastAIMove[0];\n\tconst lastY = player.lastAIMove[1];\n\t// const lastMoveStatus = player.lastAIMove[2];\n\tconst atkOppGB = opponent.gameBoard.receiveAttack;\n\tplayer.nextAIMove !== ''\n\t\t? makeSmartMove(\n\t\t\t\tplayer.nextAIMove,\n\t\t\t\tplayer.moveIndicator,\n\t\t\t\topponent.gameBoard.board\n\t\t  )\n\t\t: makeRandomAIMove(player, opponent);\n\n\tfunction makeSmartMove(direction = 'down', i = 1, opponentBoard = {}) {\n\t\tif (direction === 'down') {\n\t\t\tif (atkOppGB(lastX, lastY + i)) {\n\t\t\t\tatkOppGB(lastX, lastY + i);\n\t\t\t\tif (opponentBoard[lastY + i - 1][lastX - 1] !== '※') {\n\t\t\t\t\tplayer.nextAIMove = 'up';\n\t\t\t\t\tplayer.moveIndicator = 1;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(player.moveIndicator);\n\t\t\t\t\tplayer.moveIndicator++;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tplayer.nextAIMove = 'up';\n\t\t\t\tmakeSmartMove(player.nextAIMove);\n\t\t\t}\n\t\t} else if (direction === 'up') {\n\t\t\tif (atkOppGB(lastX, lastY - i)) {\n\t\t\t\tatkOppGB(lastX, lastY - i);\n\t\t\t\tif (opponentBoard[lastY - i - 1][lastX - 1] !== '※') {\n\t\t\t\t\tplayer.nextAIMove = 'left';\n\t\t\t\t\tplayer.moveIndicator = 1;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(player.moveIndicator);\n\t\t\t\t\tplayer.moveIndicator++;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tplayer.nextAIMove = 'left';\n\t\t\t\tmakeSmartMove(player.nextAIMove);\n\t\t\t}\n\t\t} else if (direction === 'left') {\n\t\t\tif (atkOppGB(lastX - i, lastY)) {\n\t\t\t\tatkOppGB(lastX - i, lastY);\n\t\t\t\tif (opponentBoard[lastY - 1][lastX - i - 1] !== '※') {\n\t\t\t\t\tplayer.nextAIMove = 'right';\n\t\t\t\t\tplayer.moveIndicator = 1;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(player.moveIndicator);\n\t\t\t\t\tplayer.moveIndicator++;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tplayer.nextAIMove = 'right';\n\t\t\t\tmakeSmartMove(player.nextAIMove);\n\t\t\t}\n\t\t} else if (direction === 'right') {\n\t\t\tif (atkOppGB(lastX + i, lastY)) {\n\t\t\t\tatkOppGB(lastX + i, lastY);\n\t\t\t\tif (opponentBoard[lastY - 1][lastX + i - 1] !== '※') {\n\t\t\t\t\tplayer.nextAIMove = '';\n\t\t\t\t\tplayer.moveIndicator = 1;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(player.moveIndicator);\n\t\t\t\t\tplayer.moveIndicator++;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tplayer.nextAIMove = '';\n\t\t\t\tmakeRandomAIMove(player, opponent, 10);\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport {\n\tattackShip,\n\tcheckDirectionalShipPlacement,\n\tmarkShipOnBoard,\n\tmarkShipArea,\n\thandleShipCount,\n\trandomlyPlaceShip,\n\tmakeSmartAIMove,\n\tmakeRandomAIMove,\n};\n"]},"metadata":{},"sourceType":"module"}