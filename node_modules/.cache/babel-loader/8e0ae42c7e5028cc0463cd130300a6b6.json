{"ast":null,"code":"import { GameBoard as Board } from './Battleships';\nimport { makeSmartAIMove, makeRandomAIMove } from './helperFunctions';\nexport const Player = function (name, side) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'human';\n  let gameBoard = arguments.length > 3 ? arguments[3] : undefined;\n  //测试\n  const player = {\n    name,\n    side,\n    type,\n    gameBoard,\n    lastAIMove: '',\n    nextAIMove: '',\n    moveIndicator: 1,\n    isWinner: false,\n    makeMove: (opponent, xCord, yCord) => {\n      return opponent.gameBoard.receiveAttack(xCord, yCord);\n    },\n    makeAIMove: function (opponent) {\n      let isSmart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      isSmart ? makeSmartAIMove(player, opponent) : makeRandomAIMove(player, opponent);\n    }\n  };\n  return player;\n};\n_c = Player;\nexport const CreatePlayer = (side, type) => {\n  const gameBoard = Board(side);\n  gameBoard.makeBoard();\n  gameBoard.getShips(`${side}`);\n  if (type === 'computer') gameBoard.placeShipsAtRandom();\n  let name;\n  side === 'human-player' ? name = 'Player' : name = 'AI';\n  return Player(name, side, type, gameBoard);\n};\n_c2 = CreatePlayer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Player\");\n$RefreshReg$(_c2, \"CreatePlayer\");","map":{"version":3,"sources":["/Users/zili/web-project2-battleship/src/Player.js"],"names":["GameBoard","Board","makeSmartAIMove","makeRandomAIMove","Player","name","side","type","gameBoard","player","lastAIMove","nextAIMove","moveIndicator","isWinner","makeMove","opponent","xCord","yCord","receiveAttack","makeAIMove","isSmart","CreatePlayer","makeBoard","getShips","placeShipsAtRandom"],"mappings":"AAAA,SAASA,SAAS,IAAIC,KAAtB,QAAmC,eAAnC;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,mBAAlD;AAEA,OAAO,MAAMC,MAAM,GAAG,UAACC,IAAD,EAAOC,IAAP,EAA2C;AAAA,MAA9BC,IAA8B,uEAAvB,OAAuB;AAAA,MAAdC,SAAc;AAChE;AACA,QAAMC,MAAM,GAAG;AACdJ,IAAAA,IADc;AAEdC,IAAAA,IAFc;AAGdC,IAAAA,IAHc;AAIdC,IAAAA,SAJc;AAKdE,IAAAA,UAAU,EAAE,EALE;AAMdC,IAAAA,UAAU,EAAE,EANE;AAOdC,IAAAA,aAAa,EAAE,CAPD;AAQdC,IAAAA,QAAQ,EAAE,KARI;AASdC,IAAAA,QAAQ,EAAE,CAACC,QAAD,EAAWC,KAAX,EAAkBC,KAAlB,KAA4B;AACrC,aAAOF,QAAQ,CAACP,SAAT,CAAmBU,aAAnB,CAAiCF,KAAjC,EAAwCC,KAAxC,CAAP;AACA,KAXa;AAYdE,IAAAA,UAAU,EAAE,UAACJ,QAAD,EAA+B;AAAA,UAApBK,OAAoB,uEAAV,KAAU;AAC1CA,MAAAA,OAAO,GACJlB,eAAe,CAACO,MAAD,EAASM,QAAT,CADX,GAEJZ,gBAAgB,CAACM,MAAD,EAASM,QAAT,CAFnB;AAGA;AAhBa,GAAf;AAkBA,SAAON,MAAP;AACA,CArBM;KAAML,M;AAuBb,OAAO,MAAMiB,YAAY,GAAG,CAACf,IAAD,EAAOC,IAAP,KAAgB;AAC3C,QAAMC,SAAS,GAAGP,KAAK,CAACK,IAAD,CAAvB;AACAE,EAAAA,SAAS,CAACc,SAAV;AACAd,EAAAA,SAAS,CAACe,QAAV,CAAoB,GAAEjB,IAAK,EAA3B;AACA,MAAIC,IAAI,KAAK,UAAb,EAAyBC,SAAS,CAACgB,kBAAV;AACzB,MAAInB,IAAJ;AACAC,EAAAA,IAAI,KAAK,cAAT,GAA2BD,IAAI,GAAG,QAAlC,GAA+CA,IAAI,GAAG,IAAtD;AACA,SAAOD,MAAM,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,SAAnB,CAAb;AACA,CARM;MAAMa,Y","sourcesContent":["import { GameBoard as Board } from './Battleships';\nimport { makeSmartAIMove, makeRandomAIMove } from './helperFunctions';\n\nexport const Player = (name, side, type = 'human', gameBoard) => {\n\t//测试\n\tconst player = {\n\t\tname,\n\t\tside,\n\t\ttype,\n\t\tgameBoard,\n\t\tlastAIMove: '',\n\t\tnextAIMove: '',\n\t\tmoveIndicator: 1,\n\t\tisWinner: false,\n\t\tmakeMove: (opponent, xCord, yCord) => {\n\t\t\treturn opponent.gameBoard.receiveAttack(xCord, yCord);\n\t\t},\n\t\tmakeAIMove: (opponent, isSmart = false) => {\n\t\t\tisSmart\n\t\t\t\t? makeSmartAIMove(player, opponent)\n\t\t\t\t: makeRandomAIMove(player, opponent);\n\t\t},\n\t};\n\treturn player;\n};\n\nexport const CreatePlayer = (side, type) => {\n\tconst gameBoard = Board(side);\n\tgameBoard.makeBoard();\n\tgameBoard.getShips(`${side}`);\n\tif (type === 'computer') gameBoard.placeShipsAtRandom();\n\tlet name;\n\tside === 'human-player' ? (name = 'Player') : (name = 'AI');\n\treturn Player(name, side, type, gameBoard);\n};\n"]},"metadata":{},"sourceType":"module"}