{"ast":null,"code":"var _jsxFileName = \"/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/components/Introduction.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../style/Intro.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeAppStatus } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Introduction = _ref => {\n  _s();\n\n  let {\n    setAppStatus\n  } = _ref;\n\n  const onSkipIntro = () => {\n    setAppStatus(\"newGame\");\n  };\n\n  const newAppStatus = useSelector(state => state.newAppStatus);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fade\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"star-wars-intro\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crawl\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Battleships\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Game Objective\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The object of Battleship is to try and sink all of the other player's before they sink all of your ships. All of the other player's ships are somewhere on his/her board.\\xA0 You try and hit them by calling out the coordinates of one of the squares on the board.\\xA0 The other player also tries to hit your ships by calling out coordinates.\\xA0 Neither you nor the other player can see the other's board so you must try to guess where they are.\\xA0 Each board in the physical game has two grids:\\xA0 the lower (horizontal) section for the player's ships and the upper part (vertical during play) for recording the player's guesses.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Starting a New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Each player places the 5 ships somewhere on their board. The ships can only be placed vertically or horizontally. Diagonal placement is not allowed. No part of a ship may hang off the edge of the board. Ships may not overlap each other. No ships may be placed on another ship. Once the guessing begins, the players may not move the ships.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Playing the Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Player's take turns guessing by calling out the coordinates. The opponent responds with \\\"hit\\\" or \\\"miss\\\" as appropriate. Both players should mark their board with pegs: red for hit, white for miss. When all of the squares that one your ships occupies have been hit, the ship will be sunk. You should announce \\\"hit and sunk\\\". In the physical game, a red peg is placed on the top edge of the vertical board to indicate a sunk ship. As soon as all of one player's ships have been sunk, the game ends.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"click-start-game-btn\",\n          onClick: onSkipIntro,\n          children: \"Click Here to Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Introduction, \"wB4tnpgSmOtH9D+5SbyaBH5DAbQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Introduction;\nexport default Introduction;\nIntroduction.propTypes = {\n  setAppStatus: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Introduction\");","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/components/Introduction.jsx"],"names":["React","PropTypes","useSelector","useDispatch","changeAppStatus","Introduction","setAppStatus","onSkipIntro","newAppStatus","state","propTypes","func","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,eAAR,QAA8B,kBAA9B;;;AAEA,MAAMC,YAAY,GAAG,QAAsB;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;;AACzC,QAAMC,WAAW,GAAG,MAAM;AACxBD,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACD,GAFD;;AAGA,QAAME,YAAY,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,YAAhB,CAAhC;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF,eA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5BF,eA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7BF,eAuCE;AAAA;AAAA;AAAA;AAAA,gBAvCF,eAwCE;AAAA;AAAA;AAAA;AAAA,gBAxCF,eAyCE;AAAQ,UAAA,SAAS,EAAC,sBAAlB;AAAyC,UAAA,OAAO,EAAED,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmDD,CA3DD;;GAAMF,Y;UAIiBH,W;;;KAJjBG,Y;AA6DN,eAAeA,YAAf;AAEAA,YAAY,CAACK,SAAb,GAAyB;AACvBJ,EAAAA,YAAY,EAAEL,SAAS,CAACU,IAAV,CAAeC;AADN,CAAzB","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../style/Intro.css\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {changeAppStatus} from \"../redux/actions\";\n\nconst Introduction = ({ setAppStatus }) => {\n  const onSkipIntro = () => {\n    setAppStatus(\"newGame\");\n  };\n  const newAppStatus = useSelector(state => state.newAppStatus);\n\n\n\n  return (\n    <div className=\"fade\">\n      <section className=\"star-wars-intro\">\n        <div className=\"crawl\">\n          <div className=\"title\">\n            <h1>Battleships</h1>\n            <h2>Rules</h2>\n          </div>\n          <h3>Game Objective</h3>\n          <p>\n            The object of Battleship is to try and sink all of the other\n            player's before they sink all of your ships. All of the other\n            player's ships are somewhere on his/her board.  You try and hit them\n            by calling out the coordinates of one of the squares on the board. \n            The other player also tries to hit your ships by calling out\n            coordinates.  Neither you nor the other player can see the other's\n            board so you must try to guess where they are.  Each board in the\n            physical game has two grids:  the lower (horizontal) section for the\n            player's ships and the upper part (vertical during play) for\n            recording the player's guesses.\n          </p>\n\n          <h3>Starting a New Game</h3>\n          <p>\n            Each player places the 5 ships somewhere on their board. The ships\n            can only be placed vertically or horizontally. Diagonal placement is\n            not allowed. No part of a ship may hang off the edge of the board.\n            Ships may not overlap each other. No ships may be placed on another\n            ship. Once the guessing begins, the players may not move the ships.\n          </p>\n\n          <h3>Playing the Game</h3>\n          <p>\n            Player's take turns guessing by calling out the coordinates. The\n            opponent responds with \"hit\" or \"miss\" as appropriate. Both players\n            should mark their board with pegs: red for hit, white for miss. When\n            all of the squares that one your ships occupies have been hit, the\n            ship will be sunk. You should announce \"hit and sunk\". In the\n            physical game, a red peg is placed on the top edge of the vertical\n            board to indicate a sunk ship. As soon as all of one player's ships\n            have been sunk, the game ends.\n          </p>\n          <br></br>\n          <br></br>\n          <button className=\"click-start-game-btn\" onClick={onSkipIntro}>\n            Click Here to Start Game\n          </button>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Introduction;\n\nIntroduction.propTypes = {\n  setAppStatus: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}