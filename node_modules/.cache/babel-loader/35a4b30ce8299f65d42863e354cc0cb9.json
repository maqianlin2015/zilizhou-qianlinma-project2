{"ast":null,"code":"var _jsxFileName = \"/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/components/FreePlayerGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/Game.css';\nimport GameBoard from './GameBoard';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeAppStatus, changeWinner } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FreePlayerGame = props => {\n  _s();\n\n  const newAppStatus = useSelector(state => state.newAppStatus);\n  const newWinner = useSelector(state => state.newWinner);\n  const dispatch = useDispatch();\n  const {\n    player,\n    opponent\n  } = props;\n  const [isGameReady, setGameReady] = useState(true);\n  const [board, setBoard] = useState([...player.gameBoard.board]);\n  const [opponentBoard, setOpponentBoard] = useState([...opponent.gameBoard.board]);\n  const [EnemyShipCount, setEnemyShipCount] = useState(opponent.gameBoard.shipCount);\n  useEffect(() => {\n    handlePlayerShipDisplay();\n  }, [board]);\n  useEffect(() => {\n    handleComputerShipDisplay();\n  }, [EnemyShipCount]);\n\n  const onMakeMove = e => {\n    const y = e.target.dataset.cord.split(',')[0];\n    const x = e.target.dataset.cord.split(',')[1];\n\n    if (player.makeMove(opponent, x, y) === true) {\n      setOpponentBoard([...opponent.gameBoard.board]);\n      setEnemyShipCount(opponent.gameBoard.shipCount); // console.table(opponentBoard);\n\n      if (opponent.gameBoard.isGameOver) {\n        onEndGame(player);\n      }\n\n      onAIMove();\n    }\n  };\n\n  const onAIMove = () => {\n    opponent.makeAIMove(player, false);\n    setBoard([...player.gameBoard.board]);\n\n    if (player.gameBoard.isGameOver) {\n      onEndGame(opponent);\n    }\n  };\n\n  const onEndGame = newWinner => {\n    setTimeout(() => {\n      dispatch(changeWinner(newWinner));\n      dispatch(changeAppStatus('announcer'));\n    }, 500);\n  };\n\n  const handlePlayerShipDisplay = () => {\n    player.gameBoard.ships.map(ship => {\n      mountShip(player, ship);\n    });\n  };\n\n  const handleComputerShipDisplay = () => {\n    opponent.gameBoard.ships.map(ship => {\n      if (ship.isSunk() === true) {\n        mountShip(opponent, ship);\n      }\n    });\n  };\n\n  const mountShip = (owner, ship) => {\n    if (ship.onBoard) {\n      const cords = [ship.coordinates[1], ship.coordinates[0]];\n      const boardDiv = document.querySelector(`.${owner.side}`);\n      const startingCell = boardDiv.querySelector(`div[data-cord=\"${cords}\"]`);\n\n      if (!startingCell.querySelector('.ship-img-grid')) {\n        const shipImg = document.createElement('img');\n        shipImg.src = process.env.PUBLIC_URL + `/images/${owner.side}${ship.size}.png`;\n        shipImg.alt = `ship-${owner.side}${ship.size}`;\n        shipImg.classList.add(`ship-img-grid`);\n        shipImg.classList.add(ship.direction);\n        shipImg.targetAble = false;\n        startingCell.appendChild(shipImg);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(GameBoard, {\n        player: opponent,\n        board: opponentBoard,\n        onMakeMove: onMakeMove,\n        isGameReady: isGameReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FreePlayerGame, \"9Fs/QtemoOU5kSBaFxEMJy1FvkA=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = FreePlayerGame;\nexport default FreePlayerGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"FreePlayerGame\");","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/components/FreePlayerGame.jsx"],"names":["React","useEffect","useState","PropTypes","GameBoard","useSelector","useDispatch","changeAppStatus","changeWinner","FreePlayerGame","props","newAppStatus","state","newWinner","dispatch","player","opponent","isGameReady","setGameReady","board","setBoard","gameBoard","opponentBoard","setOpponentBoard","EnemyShipCount","setEnemyShipCount","shipCount","handlePlayerShipDisplay","handleComputerShipDisplay","onMakeMove","e","y","target","dataset","cord","split","x","makeMove","isGameOver","onEndGame","onAIMove","makeAIMove","setTimeout","ships","map","ship","mountShip","isSunk","owner","onBoard","cords","coordinates","boardDiv","document","querySelector","side","startingCell","shipImg","createElement","src","process","env","PUBLIC_URL","size","alt","classList","add","direction","targetAble","appendChild"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/Game.css';\nimport GameBoard from './GameBoard';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {changeAppStatus, changeWinner} from \"../redux/actions\";\n\nconst FreePlayerGame = (props) => {\n\tconst newAppStatus = useSelector(state => state.newAppStatus);\n\tconst newWinner = useSelector(state => state.newWinner);\n\tconst dispatch = useDispatch();\n\n\tconst { player, opponent } = props;\n\tconst [isGameReady, setGameReady] = useState(true);\n\tconst [board, setBoard] = useState([...player.gameBoard.board]);\n\tconst [opponentBoard, setOpponentBoard] = useState([\n\t\t...opponent.gameBoard.board,\n\t]);\n\tconst [EnemyShipCount, setEnemyShipCount] = useState(\n\t\topponent.gameBoard.shipCount\n\t);\n\n\tuseEffect(() => {\n\t\thandlePlayerShipDisplay();\n\t}, [board]);\n\n\tuseEffect(() => {\n\t\thandleComputerShipDisplay();\n\t}, [EnemyShipCount]);\n\n\tconst onMakeMove = (e) => {\n\t\tconst y = e.target.dataset.cord.split(',')[0];\n\t\tconst x = e.target.dataset.cord.split(',')[1];\n\t\tif (player.makeMove(opponent, x, y) === true) {\n\t\t\tsetOpponentBoard([...opponent.gameBoard.board]);\n\t\t\tsetEnemyShipCount(opponent.gameBoard.shipCount);\n\t\t\t// console.table(opponentBoard);\n\t\t\tif (opponent.gameBoard.isGameOver) {\n\t\t\t\tonEndGame(player);\n\t\t\t}\n\t\t\tonAIMove();\n\t\t}\n\t};\n\n\tconst onAIMove = () => {\n\t\topponent.makeAIMove(player, false);\n\t\tsetBoard([...player.gameBoard.board]);\n\t\tif (player.gameBoard.isGameOver) {\n\t\t\tonEndGame(opponent);\n\t\t}\n\t};\n\n\tconst onEndGame = (newWinner) => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch(changeWinner(newWinner));\n\t\t\tdispatch(changeAppStatus('announcer'));\n\t\t}, 500);\n\t};\n\n\tconst handlePlayerShipDisplay = () => {\n\t\tplayer.gameBoard.ships.map((ship) => {\n\t\t\tmountShip(player, ship);\n\t\t});\n\t};\n\n\tconst handleComputerShipDisplay = () => {\n\t\topponent.gameBoard.ships.map((ship) => {\n\t\t\tif (ship.isSunk() === true) {\n\t\t\t\tmountShip(opponent, ship);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst mountShip = (owner, ship) => {\n\t\tif (ship.onBoard) {\n\t\t\tconst cords = [ship.coordinates[1], ship.coordinates[0]];\n\t\t\tconst boardDiv = document.querySelector(`.${owner.side}`);\n\t\t\tconst startingCell = boardDiv.querySelector(`div[data-cord=\"${cords}\"]`);\n\t\t\tif (!startingCell.querySelector('.ship-img-grid')) {\n\t\t\t\tconst shipImg = document.createElement('img');\n\t\t\t\tshipImg.src =\n\t\t\t\t\tprocess.env.PUBLIC_URL + `/images/${owner.side}${ship.size}.png`;\n\t\t\t\tshipImg.alt = `ship-${owner.side}${ship.size}`;\n\t\t\t\tshipImg.classList.add(`ship-img-grid`);\n\t\t\t\tshipImg.classList.add(ship.direction);\n\t\t\t\tshipImg.targetAble = false;\n\t\t\t\tstartingCell.appendChild(shipImg);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t<GameBoard\n\t\t\t\t\t\tplayer={opponent}\n\t\t\t\t\t\tboard={opponentBoard}\n\t\t\t\t\t\tonMakeMove={onMakeMove}\n\t\t\t\t\t\tisGameReady={isGameReady}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default FreePlayerGame;"]},"metadata":{},"sourceType":"module"}