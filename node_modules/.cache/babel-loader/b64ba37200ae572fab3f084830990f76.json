{"ast":null,"code":"var _jsxFileName = \"/Users/michelle_ma/Desktop/proj2/src/components/FreePlayerGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import { CSSTransition } from 'react-transition-group';\n\nimport PropTypes from 'prop-types';\nimport '../style/Game.css';\nimport GameBoard from './GameBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FreePlayerGame = props => {\n  _s();\n\n  const {\n    player,\n    opponent\n  } = props;\n  const [isGameReady, setGameReady] = useState(false);\n  const [board, setBoard] = useState([...player.gameBoard.board]);\n  const [opponentBoard, setOpponentBoard] = useState([...opponent.gameBoard.board]);\n  const [EnemyShipCount, setEnemyShipCount] = useState(opponent.gameBoard.shipCount);\n  useEffect(() => {\n    handlePlayerShipDisplay();\n  }, [board]);\n  useEffect(() => {\n    handleComputerShipDisplay();\n  }, [EnemyShipCount]);\n\n  const onPlaceRandomly = () => {\n    onResetBoard();\n    player.gameBoard.placeShipsAtRandom();\n    setBoard([...player.gameBoard.board]);\n  };\n\n  const onFlipShips = () => {\n    player.gameBoard.ships.forEach(ship => {\n      if (!ship.onBoard) player.gameBoard.changeShipDirection(ship);\n    });\n    setBoard([...player.gameBoard.board]);\n    document.querySelector('.ship-wrapper').classList.toggle('flipped');\n  };\n\n  const onResetBoard = () => {\n    player.gameBoard.makeBoard();\n    player.gameBoard.getShips();\n    setBoard([...player.gameBoard.board]);\n  };\n\n  const onPlaceShip = e => {\n    const y = e.target.dataset.cord.split(',')[0];\n    const x = e.target.dataset.cord.split(',')[1];\n    const shipID = e.dataTransfer.getData('ship');\n    const ship = player.gameBoard.ships[shipID - 1];\n    player.gameBoard.placeShip(ship, x, y); // console.table(board);\n\n    setBoard([...player.gameBoard.board]);\n  };\n\n  const onStartGame = () => {\n    if (player.gameBoard.isReady) setGameReady(true);\n  };\n\n  const onMakeMove = e => {\n    const y = e.target.dataset.cord.split(',')[0];\n    const x = e.target.dataset.cord.split(',')[1];\n\n    if (player.makeMove(opponent, x, y) === true) {\n      setOpponentBoard([...opponent.gameBoard.board]);\n      setEnemyShipCount(opponent.gameBoard.shipCount); // console.table(opponentBoard);\n\n      if (opponent.gameBoard.isGameOver) {\n        onEndGame(player);\n      }\n\n      onAIMove();\n    }\n  };\n\n  const onAIMove = () => {\n    opponent.makeAIMove(player, false);\n    setBoard([...player.gameBoard.board]); // console.table(board);\n\n    if (player.gameBoard.isGameOver) {\n      onEndGame(opponent);\n    }\n  };\n\n  const onEndGame = winner => {\n    setTimeout(() => {\n      props.setWinner(winner);\n      props.setAppStatus('announcer');\n    }, 500);\n  };\n\n  const handlePlayerShipDisplay = () => {\n    player.gameBoard.ships.map(ship => {\n      mountShip(player, ship);\n    });\n  };\n\n  const handleComputerShipDisplay = () => {\n    opponent.gameBoard.ships.map(ship => {\n      if (ship.isSunk() === true) {\n        mountShip(opponent, ship);\n      }\n    });\n  };\n\n  const mountShip = (owner, ship) => {\n    if (ship.onBoard) {\n      const cords = [ship.coordinates[1], ship.coordinates[0]];\n      const boardDiv = document.querySelector(`.${owner.side}`);\n      const startingCell = boardDiv.querySelector(`div[data-cord=\"${cords}\"]`);\n\n      if (!startingCell.querySelector('.ship-img-grid')) {\n        const shipImg = document.createElement('img');\n        shipImg.src = // eslint-disable-next-line no-undef\n        process.env.PUBLIC_URL + `/images/${owner.side}${ship.size}.png`;\n        shipImg.alt = `ship-${owner.side}${ship.size}`;\n        shipImg.classList.add(`ship-img-grid`);\n        shipImg.classList.add(ship.direction);\n        shipImg.targetAble = false;\n        startingCell.appendChild(shipImg);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isGameReady ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(GameBoard, {\n        player: player,\n        board: board,\n        isGameReady: isGameReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        player: opponent,\n        board: opponentBoard,\n        onMakeMove: onMakeMove,\n        isGameReady: isGameReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(GameBoard, {\n        player: player,\n        board: board,\n        isGameReady: isGameReady,\n        setGameReady: setGameReady,\n        onFlipShips: onFlipShips,\n        onPlaceShip: onPlaceShip,\n        onPlaceRandomly: onPlaceRandomly,\n        onResetBoard: onResetBoard,\n        onStartGame: onStartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FreePlayerGame, \"2vvrA0ARBKMe6+6TS+oi/1dUbww=\");\n\n_c = FreePlayerGame;\nexport default Game;\nGame.propTypes = {\n  player: PropTypes.object,\n  board: PropTypes.array,\n  setBoard: PropTypes.func,\n  opponent: PropTypes.object,\n  opponentBoard: PropTypes.array,\n  setOpponentBoard: PropTypes.func,\n  PlayerOne: PropTypes.object,\n  PlayerTwo: PropTypes.object,\n  gameReady: PropTypes.bool,\n  setGameReady: PropTypes.func,\n  winner: PropTypes.object,\n  setWinner: PropTypes.func,\n  setAppStatus: PropTypes.func\n};\nGame.defaultProps = {\n  setBoard: () => {},\n  setOpponentBoard: () => {},\n  gameReady: false,\n  setGameReady: () => {},\n  setWinner: () => {},\n  setAppStatus: () => {}\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"FreePlayerGame\");","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/proj2/src/components/FreePlayerGame.jsx"],"names":["React","useEffect","useState","PropTypes","GameBoard","FreePlayerGame","props","player","opponent","isGameReady","setGameReady","board","setBoard","gameBoard","opponentBoard","setOpponentBoard","EnemyShipCount","setEnemyShipCount","shipCount","handlePlayerShipDisplay","handleComputerShipDisplay","onPlaceRandomly","onResetBoard","placeShipsAtRandom","onFlipShips","ships","forEach","ship","onBoard","changeShipDirection","document","querySelector","classList","toggle","makeBoard","getShips","onPlaceShip","e","y","target","dataset","cord","split","x","shipID","dataTransfer","getData","placeShip","onStartGame","isReady","onMakeMove","makeMove","isGameOver","onEndGame","onAIMove","makeAIMove","winner","setTimeout","setWinner","setAppStatus","map","mountShip","isSunk","owner","cords","coordinates","boardDiv","side","startingCell","shipImg","createElement","src","process","env","PUBLIC_URL","size","alt","add","direction","targetAble","appendChild","Game","propTypes","object","array","func","PlayerOne","PlayerTwo","gameReady","bool","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBF,KAA7B;AACA,QAAM,CAACG,WAAD,EAAcC,YAAd,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAC,GAAGK,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAlC;AACA,QAAM,CAACG,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,CAClD,GAAGM,QAAQ,CAACK,SAAT,CAAmBF,KAD4B,CAAD,CAAlD;AAGA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CACnDM,QAAQ,CAACK,SAAT,CAAmBK,SADgC,CAApD;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AACfkB,IAAAA,uBAAuB;AACvB,GAFQ,EAEN,CAACR,KAAD,CAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACfmB,IAAAA,yBAAyB;AACzB,GAFQ,EAEN,CAACJ,cAAD,CAFM,CAAT;;AAIA,QAAMK,eAAe,GAAG,MAAM;AAC7BC,IAAAA,YAAY;AACZf,IAAAA,MAAM,CAACM,SAAP,CAAiBU,kBAAjB;AACAX,IAAAA,QAAQ,CAAC,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAR;AACA,GAJD;;AAMA,QAAMa,WAAW,GAAG,MAAM;AACzBjB,IAAAA,MAAM,CAACM,SAAP,CAAiBY,KAAjB,CAAuBC,OAAvB,CAAgCC,IAAD,IAAU;AACxC,UAAI,CAACA,IAAI,CAACC,OAAV,EAAmBrB,MAAM,CAACM,SAAP,CAAiBgB,mBAAjB,CAAqCF,IAArC;AACnB,KAFD;AAGAf,IAAAA,QAAQ,CAAC,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAR;AACAmB,IAAAA,QAAQ,CAACC,aAAT,CAAuB,eAAvB,EAAwCC,SAAxC,CAAkDC,MAAlD,CAAyD,SAAzD;AACA,GAND;;AAQA,QAAMX,YAAY,GAAG,MAAM;AAC1Bf,IAAAA,MAAM,CAACM,SAAP,CAAiBqB,SAAjB;AACA3B,IAAAA,MAAM,CAACM,SAAP,CAAiBsB,QAAjB;AACAvB,IAAAA,QAAQ,CAAC,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAR;AACA,GAJD;;AAMA,QAAMyB,WAAW,GAAIC,CAAD,IAAO;AAC1B,UAAMC,CAAC,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAV;AACA,UAAMC,CAAC,GAAGN,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAV;AACA,UAAME,MAAM,GAAGP,CAAC,CAACQ,YAAF,CAAeC,OAAf,CAAuB,MAAvB,CAAf;AACA,UAAMnB,IAAI,GAAGpB,MAAM,CAACM,SAAP,CAAiBY,KAAjB,CAAuBmB,MAAM,GAAG,CAAhC,CAAb;AACArC,IAAAA,MAAM,CAACM,SAAP,CAAiBkC,SAAjB,CAA2BpB,IAA3B,EAAiCgB,CAAjC,EAAoCL,CAApC,EAL0B,CAM1B;;AACA1B,IAAAA,QAAQ,CAAC,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAR;AACA,GARD;;AAUA,QAAMqC,WAAW,GAAG,MAAM;AACzB,QAAIzC,MAAM,CAACM,SAAP,CAAiBoC,OAArB,EAA8BvC,YAAY,CAAC,IAAD,CAAZ;AAC9B,GAFD;;AAIA,QAAMwC,UAAU,GAAIb,CAAD,IAAO;AACzB,UAAMC,CAAC,GAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAV;AACA,UAAMC,CAAC,GAAGN,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBC,IAAjB,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAAV;;AACA,QAAInC,MAAM,CAAC4C,QAAP,CAAgB3C,QAAhB,EAA0BmC,CAA1B,EAA6BL,CAA7B,MAAoC,IAAxC,EAA8C;AAC7CvB,MAAAA,gBAAgB,CAAC,CAAC,GAAGP,QAAQ,CAACK,SAAT,CAAmBF,KAAvB,CAAD,CAAhB;AACAM,MAAAA,iBAAiB,CAACT,QAAQ,CAACK,SAAT,CAAmBK,SAApB,CAAjB,CAF6C,CAG7C;;AACA,UAAIV,QAAQ,CAACK,SAAT,CAAmBuC,UAAvB,EAAmC;AAClCC,QAAAA,SAAS,CAAC9C,MAAD,CAAT;AACA;;AACD+C,MAAAA,QAAQ;AACR;AACD,GAZD;;AAcA,QAAMA,QAAQ,GAAG,MAAM;AACtB9C,IAAAA,QAAQ,CAAC+C,UAAT,CAAoBhD,MAApB,EAA4B,KAA5B;AACAK,IAAAA,QAAQ,CAAC,CAAC,GAAGL,MAAM,CAACM,SAAP,CAAiBF,KAArB,CAAD,CAAR,CAFsB,CAGtB;;AACA,QAAIJ,MAAM,CAACM,SAAP,CAAiBuC,UAArB,EAAiC;AAChCC,MAAAA,SAAS,CAAC7C,QAAD,CAAT;AACA;AACD,GAPD;;AASA,QAAM6C,SAAS,GAAIG,MAAD,IAAY;AAC7BC,IAAAA,UAAU,CAAC,MAAM;AAChBnD,MAAAA,KAAK,CAACoD,SAAN,CAAgBF,MAAhB;AACAlD,MAAAA,KAAK,CAACqD,YAAN,CAAmB,WAAnB;AACA,KAHS,EAGP,GAHO,CAAV;AAIA,GALD;;AAOA,QAAMxC,uBAAuB,GAAG,MAAM;AACrCZ,IAAAA,MAAM,CAACM,SAAP,CAAiBY,KAAjB,CAAuBmC,GAAvB,CAA4BjC,IAAD,IAAU;AACpCkC,MAAAA,SAAS,CAACtD,MAAD,EAASoB,IAAT,CAAT;AACA,KAFD;AAGA,GAJD;;AAMA,QAAMP,yBAAyB,GAAG,MAAM;AACvCZ,IAAAA,QAAQ,CAACK,SAAT,CAAmBY,KAAnB,CAAyBmC,GAAzB,CAA8BjC,IAAD,IAAU;AACtC,UAAIA,IAAI,CAACmC,MAAL,OAAkB,IAAtB,EAA4B;AAC3BD,QAAAA,SAAS,CAACrD,QAAD,EAAWmB,IAAX,CAAT;AACA;AACD,KAJD;AAKA,GAND;;AAQA,QAAMkC,SAAS,GAAG,CAACE,KAAD,EAAQpC,IAAR,KAAiB;AAClC,QAAIA,IAAI,CAACC,OAAT,EAAkB;AACjB,YAAMoC,KAAK,GAAG,CAACrC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAAD,EAAsBtC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAAtB,CAAd;AACA,YAAMC,QAAQ,GAAGpC,QAAQ,CAACC,aAAT,CAAwB,IAAGgC,KAAK,CAACI,IAAK,EAAtC,CAAjB;AACA,YAAMC,YAAY,GAAGF,QAAQ,CAACnC,aAAT,CAAwB,kBAAiBiC,KAAM,IAA/C,CAArB;;AACA,UAAI,CAACI,YAAY,CAACrC,aAAb,CAA2B,gBAA3B,CAAL,EAAmD;AAClD,cAAMsC,OAAO,GAAGvC,QAAQ,CAACwC,aAAT,CAAuB,KAAvB,CAAhB;AACAD,QAAAA,OAAO,CAACE,GAAR,GACC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAA0B,WAAUX,KAAK,CAACI,IAAK,GAAExC,IAAI,CAACgD,IAAK,MAF5D;AAGAN,QAAAA,OAAO,CAACO,GAAR,GAAe,QAAOb,KAAK,CAACI,IAAK,GAAExC,IAAI,CAACgD,IAAK,EAA7C;AACAN,QAAAA,OAAO,CAACrC,SAAR,CAAkB6C,GAAlB,CAAuB,eAAvB;AACAR,QAAAA,OAAO,CAACrC,SAAR,CAAkB6C,GAAlB,CAAsBlD,IAAI,CAACmD,SAA3B;AACAT,QAAAA,OAAO,CAACU,UAAR,GAAqB,KAArB;AACAX,QAAAA,YAAY,CAACY,WAAb,CAAyBX,OAAzB;AACA;AACD;AACD,GAjBD;;AAmBA,sBACC;AAAA,cACE5D,WAAW,gBACX;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACC,QAAC,SAAD;AAAW,QAAA,MAAM,EAAEF,MAAnB;AAA2B,QAAA,KAAK,EAAEI,KAAlC;AAAyC,QAAA,WAAW,EAAEF;AAAtD;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,SAAD;AACC,QAAA,MAAM,EAAED,QADT;AAEC,QAAA,KAAK,EAAEM,aAFR;AAGC,QAAA,UAAU,EAAEoC,UAHb;AAIC,QAAA,WAAW,EAAEzC;AAJd;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,gBAWX;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACC,QAAC,SAAD;AACC,QAAA,MAAM,EAAEF,MADT;AAEC,QAAA,KAAK,EAAEI,KAFR;AAGC,QAAA,WAAW,EAAEF,WAHd;AAIC,QAAA,YAAY,EAAEC,YAJf;AAKC,QAAA,WAAW,EAAEc,WALd;AAMC,QAAA,WAAW,EAAEY,WANd;AAOC,QAAA,eAAe,EAAEf,eAPlB;AAQC,QAAA,YAAY,EAAEC,YARf;AASC,QAAA,WAAW,EAAE0B;AATd;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,UADD;AA6BA,CAjJD;;GAAM3C,c;;KAAAA,c;AAmJN,eAAe4E,IAAf;AAEAA,IAAI,CAACC,SAAL,GAAiB;AAChB3E,EAAAA,MAAM,EAAEJ,SAAS,CAACgF,MADF;AAEhBxE,EAAAA,KAAK,EAAER,SAAS,CAACiF,KAFD;AAGhBxE,EAAAA,QAAQ,EAAET,SAAS,CAACkF,IAHJ;AAIhB7E,EAAAA,QAAQ,EAAEL,SAAS,CAACgF,MAJJ;AAKhBrE,EAAAA,aAAa,EAAEX,SAAS,CAACiF,KALT;AAMhBrE,EAAAA,gBAAgB,EAAEZ,SAAS,CAACkF,IANZ;AAOhBC,EAAAA,SAAS,EAAEnF,SAAS,CAACgF,MAPL;AAQhBI,EAAAA,SAAS,EAAEpF,SAAS,CAACgF,MARL;AAShBK,EAAAA,SAAS,EAAErF,SAAS,CAACsF,IATL;AAUhB/E,EAAAA,YAAY,EAAEP,SAAS,CAACkF,IAVR;AAWhB7B,EAAAA,MAAM,EAAErD,SAAS,CAACgF,MAXF;AAYhBzB,EAAAA,SAAS,EAAEvD,SAAS,CAACkF,IAZL;AAahB1B,EAAAA,YAAY,EAAExD,SAAS,CAACkF;AAbR,CAAjB;AAgBAJ,IAAI,CAACS,YAAL,GAAoB;AACnB9E,EAAAA,QAAQ,EAAE,MAAM,CAAE,CADC;AAEnBG,EAAAA,gBAAgB,EAAE,MAAM,CAAE,CAFP;AAGnByE,EAAAA,SAAS,EAAE,KAHQ;AAInB9E,EAAAA,YAAY,EAAE,MAAM,CAAE,CAJH;AAKnBgD,EAAAA,SAAS,EAAE,MAAM,CAAE,CALA;AAMnBC,EAAAA,YAAY,EAAE,MAAM,CAAE;AANH,CAApB","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport '../style/Game.css';\nimport GameBoard from './GameBoard';\n\nconst FreePlayerGame = (props) => {\n\tconst { player, opponent } = props;\n\tconst [isGameReady, setGameReady] = useState(false);\n\tconst [board, setBoard] = useState([...player.gameBoard.board]);\n\tconst [opponentBoard, setOpponentBoard] = useState([\n\t\t...opponent.gameBoard.board,\n\t]);\n\tconst [EnemyShipCount, setEnemyShipCount] = useState(\n\t\topponent.gameBoard.shipCount\n\t);\n\n\tuseEffect(() => {\n\t\thandlePlayerShipDisplay();\n\t}, [board]);\n\n\tuseEffect(() => {\n\t\thandleComputerShipDisplay();\n\t}, [EnemyShipCount]);\n\n\tconst onPlaceRandomly = () => {\n\t\tonResetBoard();\n\t\tplayer.gameBoard.placeShipsAtRandom();\n\t\tsetBoard([...player.gameBoard.board]);\n\t};\n\n\tconst onFlipShips = () => {\n\t\tplayer.gameBoard.ships.forEach((ship) => {\n\t\t\tif (!ship.onBoard) player.gameBoard.changeShipDirection(ship);\n\t\t});\n\t\tsetBoard([...player.gameBoard.board]);\n\t\tdocument.querySelector('.ship-wrapper').classList.toggle('flipped');\n\t};\n\n\tconst onResetBoard = () => {\n\t\tplayer.gameBoard.makeBoard();\n\t\tplayer.gameBoard.getShips();\n\t\tsetBoard([...player.gameBoard.board]);\n\t};\n\n\tconst onPlaceShip = (e) => {\n\t\tconst y = e.target.dataset.cord.split(',')[0];\n\t\tconst x = e.target.dataset.cord.split(',')[1];\n\t\tconst shipID = e.dataTransfer.getData('ship');\n\t\tconst ship = player.gameBoard.ships[shipID - 1];\n\t\tplayer.gameBoard.placeShip(ship, x, y);\n\t\t// console.table(board);\n\t\tsetBoard([...player.gameBoard.board]);\n\t};\n\n\tconst onStartGame = () => {\n\t\tif (player.gameBoard.isReady) setGameReady(true);\n\t};\n\n\tconst onMakeMove = (e) => {\n\t\tconst y = e.target.dataset.cord.split(',')[0];\n\t\tconst x = e.target.dataset.cord.split(',')[1];\n\t\tif (player.makeMove(opponent, x, y) === true) {\n\t\t\tsetOpponentBoard([...opponent.gameBoard.board]);\n\t\t\tsetEnemyShipCount(opponent.gameBoard.shipCount);\n\t\t\t// console.table(opponentBoard);\n\t\t\tif (opponent.gameBoard.isGameOver) {\n\t\t\t\tonEndGame(player);\n\t\t\t}\n\t\t\tonAIMove();\n\t\t}\n\t};\n\n\tconst onAIMove = () => {\n\t\topponent.makeAIMove(player, false);\n\t\tsetBoard([...player.gameBoard.board]);\n\t\t// console.table(board);\n\t\tif (player.gameBoard.isGameOver) {\n\t\t\tonEndGame(opponent);\n\t\t}\n\t};\n\n\tconst onEndGame = (winner) => {\n\t\tsetTimeout(() => {\n\t\t\tprops.setWinner(winner);\n\t\t\tprops.setAppStatus('announcer');\n\t\t}, 500);\n\t};\n\n\tconst handlePlayerShipDisplay = () => {\n\t\tplayer.gameBoard.ships.map((ship) => {\n\t\t\tmountShip(player, ship);\n\t\t});\n\t};\n\n\tconst handleComputerShipDisplay = () => {\n\t\topponent.gameBoard.ships.map((ship) => {\n\t\t\tif (ship.isSunk() === true) {\n\t\t\t\tmountShip(opponent, ship);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst mountShip = (owner, ship) => {\n\t\tif (ship.onBoard) {\n\t\t\tconst cords = [ship.coordinates[1], ship.coordinates[0]];\n\t\t\tconst boardDiv = document.querySelector(`.${owner.side}`);\n\t\t\tconst startingCell = boardDiv.querySelector(`div[data-cord=\"${cords}\"]`);\n\t\t\tif (!startingCell.querySelector('.ship-img-grid')) {\n\t\t\t\tconst shipImg = document.createElement('img');\n\t\t\t\tshipImg.src =\n\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\tprocess.env.PUBLIC_URL + `/images/${owner.side}${ship.size}.png`;\n\t\t\t\tshipImg.alt = `ship-${owner.side}${ship.size}`;\n\t\t\t\tshipImg.classList.add(`ship-img-grid`);\n\t\t\t\tshipImg.classList.add(ship.direction);\n\t\t\t\tshipImg.targetAble = false;\n\t\t\t\tstartingCell.appendChild(shipImg);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{isGameReady ? (\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t<GameBoard player={player} board={board} isGameReady={isGameReady} />\n\t\t\t\t\t<GameBoard\n\t\t\t\t\t\tplayer={opponent}\n\t\t\t\t\t\tboard={opponentBoard}\n\t\t\t\t\t\tonMakeMove={onMakeMove}\n\t\t\t\t\t\tisGameReady={isGameReady}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t<GameBoard\n\t\t\t\t\t\tplayer={player}\n\t\t\t\t\t\tboard={board}\n\t\t\t\t\t\tisGameReady={isGameReady}\n\t\t\t\t\t\tsetGameReady={setGameReady}\n\t\t\t\t\t\tonFlipShips={onFlipShips}\n\t\t\t\t\t\tonPlaceShip={onPlaceShip}\n\t\t\t\t\t\tonPlaceRandomly={onPlaceRandomly}\n\t\t\t\t\t\tonResetBoard={onResetBoard}\n\t\t\t\t\t\tonStartGame={onStartGame}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Game;\n\nGame.propTypes = {\n\tplayer: PropTypes.object,\n\tboard: PropTypes.array,\n\tsetBoard: PropTypes.func,\n\topponent: PropTypes.object,\n\topponentBoard: PropTypes.array,\n\tsetOpponentBoard: PropTypes.func,\n\tPlayerOne: PropTypes.object,\n\tPlayerTwo: PropTypes.object,\n\tgameReady: PropTypes.bool,\n\tsetGameReady: PropTypes.func,\n\twinner: PropTypes.object,\n\tsetWinner: PropTypes.func,\n\tsetAppStatus: PropTypes.func,\n};\n\nGame.defaultProps = {\n\tsetBoard: () => {},\n\tsetOpponentBoard: () => {},\n\tgameReady: false,\n\tsetGameReady: () => {},\n\tsetWinner: () => {},\n\tsetAppStatus: () => {},\n};\n"]},"metadata":{},"sourceType":"module"}