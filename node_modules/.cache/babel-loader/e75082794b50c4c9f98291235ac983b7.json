{"ast":null,"code":"var _jsxFileName = \"/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { CreatePlayer } from './Player';\nimport Introduction from './components/Introduction';\nimport NewGame from './components/NewGame';\nimport Game from './components/Game';\nimport FreePlayerGame from './components/FreePlayerGame';\nimport Announcer from './components/Announcer';\nimport './style/App.css';\nimport { Provider } from \"react-redux\";\nimport store from \"../src/redux/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeAppStatus } from './redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // const [appStatus, setAppStatus] = useState('intro');\n  // const [winner, setWinner] = useState(null);\n  let PlayerOne = CreatePlayer('human-player', 'human');\n  let PlayerTwo = CreatePlayer('ai-player', 'computer'); //update timeout from 2000 to 20//\n\n  let timeout = 20;\n  const newAppStatus = useSelector(state => state.newAppStatus);\n  const dispatch = useDispatch();\n\n  if (newAppStatus == \"intro\") {\n    return /*#__PURE__*/_jsxDEV(Introduction, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this);\n  } else if (newAppStatus == \"newGame\") {\n    return /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this);\n  }\n};\n\n_s(App, \"ITUNjs/6t7HSklUc5ODWkp2b2gw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/michelle_ma/Desktop/NEU/Web/Project/web-project2-battleship/src/App.js"],"names":["React","useState","CSSTransition","CreatePlayer","Introduction","NewGame","Game","FreePlayerGame","Announcer","Provider","store","useSelector","useDispatch","changeAppStatus","App","PlayerOne","PlayerTwo","timeout","newAppStatus","state","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,iBAAP;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,iBAAhC;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEjB;AACA;AACA,MAAIC,SAAS,GAAGZ,YAAY,CAAC,cAAD,EAAiB,OAAjB,CAA5B;AACA,MAAIa,SAAS,GAAGb,YAAY,CAAC,WAAD,EAAc,UAAd,CAA5B,CALiB,CAMjB;;AACA,MAAIc,OAAO,GAAG,EAAd;AAGA,QAAMC,YAAY,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,YAAhB,CAAhC;AACA,QAAME,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,MAAIM,YAAY,IAAI,OAApB,EAA6B;AAC5B,wBACC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADD;AAGA,GAJD,MAIO,IAAIA,YAAY,IAAI,SAApB,EAA+B;AACrC,wBACC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADD;AAIA;AACD,CAvBD;;GAAMJ,G;UAUgBH,W,EACJC,W;;;KAXZE,G;AAyBN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { CreatePlayer } from './Player';\nimport Introduction from './components/Introduction';\nimport NewGame from './components/NewGame';\nimport Game from './components/Game';\nimport FreePlayerGame from './components/FreePlayerGame';\nimport Announcer from './components/Announcer';\nimport './style/App.css';\n\nimport { Provider } from \"react-redux\";\nimport store from \"../src/redux/store\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeAppStatus } from './redux/actions';\n\n\nconst App = () => {\n\n\t// const [appStatus, setAppStatus] = useState('intro');\n\t// const [winner, setWinner] = useState(null);\n\tlet PlayerOne = CreatePlayer('human-player', 'human');\n\tlet PlayerTwo = CreatePlayer('ai-player', 'computer');\n\t//update timeout from 2000 to 20//\n\tlet timeout = 20;\n\n\n\tconst newAppStatus = useSelector(state => state.newAppStatus);\n\tconst dispatch = useDispatch();\n\n\tif (newAppStatus == \"intro\") {\n\t\treturn (\n\t\t\t<Introduction />\n\t\t)\n\t} else if (newAppStatus == \"newGame\") {\n\t\treturn (\n\t\t\t<NewGame/>\n\n\t\t)\n\t}\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}